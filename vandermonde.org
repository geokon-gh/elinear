#+TITLE:  Vandermonde matrices
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../static/worg.css" />
#+options: num:nil
#+HTML_MATHJAX: path: "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"

* Intro
For context and to see what motivates the need for Vandermonde matrices, see the linear algebra system developed in [[..][the parent directory]].
The code is based off of the theories developed in [[matrixanalysis.com][Matrix Analysis & Applied Linear Algebra]]

~pages 185-186~ introduces the Vandermonde matix which provides us with a way to solve for polynomials that fit a set of given points. 

Polynomials are equations of the form:
\begin{equation}
y=a_{1}+a_{2}x+a_{3}x^{2}+a_{4}x^{3}+...
\end{equation}
If we have a problem that gives us many ~(x,y)~ points we can use this formula to generate many polynomial equation
\begin{equation}
y_1=a_{1}+a_{2}x_1+a_{3}x_{1}^{2}+a_{4}x_{1}^{3}+...\\
y_2=a_{1}+a_{2}x_2+a_{3}x_{2}^{2}+a_{4}x_{2}^{3}+...\\
y_3=a_{1}+a_{2}x_3+a_{3}x_{3}^{2}+a_{4}x_{3}^{3}+...\\
...
\end{equation}
This is now a standard matrix problem with the =a='s being the unknown

\begin{equation}
\begin{bmatrix}
1 & x_1 & x_{1}^2 & x_{1}^3 ..\\
1 & x_2 & x_{2}^2 & x_{2}^3 ..\\
1 & x_3 & x_{3}^2 & x_{3}^3 ..\\
...\\
\end{bmatrix}
\begin{bmatrix}
a_1\\
a_2\\
a_3\\
a_4\\
...\\
\end{bmatrix}
=
\begin{bmatrix}
y_1\\
y_2\\
y_3\\
...\\
\end{bmatrix}
\end{equation}

The trick here is now we can adjust he number of terms in the polynomial (ie. the number of *a_{n}*'s) so that the matrix is always square and in the general case non-singular. Now that we know how to solve *Ax=b* using the *LU decomposition* we can solve for all the polynomial factors *a_{n}* and we can end up with the original equation

\begin{equation}
y=a_{1}+a_{2}x+a_{3}x^{2}+a_{4}x^{3}+...
\end{equation}

Which will not hold true for all our =(x,y)= points but also for all other values of =x= we want to test - so we will have in the end fit a polynomial curve through all our points.

* Setup
To start we import ELisp linear algebra function we've developed
#+BEGIN_SRC emacs-lisp :results output silent :session :tangle vandermonde.el
(load-file "matrix.el")
#+END_SRC

Next we build the /Vandermonde matrix/ which is the matrix of  ~x~'s and their exponents
#+BEGIN_SRC emacs-lisp :results output silent :session :tangle vandermonde.el
  (defun matrix-vandermonde (list-of-xs number-of-points)
    "Build a Vandermonde matrix of the appropriate rank from a LIST-OF-Xs"
    (defun matrix-build-polynomial-list (x degree)
      "Build a list of (X,X^2,X^3,..,X^DEGREE)"
      (cond
       ((zerop degree)
        '(1))
       (t
        (cons
         (expt x degree)
         (matrix-build-polynomial-list x (1- degree))
         ))))
    (defun matrix-vandermonde-data (list-of-xs degree)
      "Builds the data vector of the Vandermonde matrix"
      (cond
       ((null list-of-xs)
        '())
       (t
        (append
         (reverse
          (matrix-build-polynomial-list
           (car list-of-xs)
           degree))
         (matrix-vandermonde-data
          (cdr list-of-xs)
          degree)))))
    (matrix-from-data-list
     number-of-points
     number-of-points
     (matrix-vandermonde-data
      list-of-xs
      (1- number-of-points))))
#+END_SRC
Then given a set of points, we can fit a polynomial to them by using our input solver to solve for the polynomial factors.
#+BEGIN_SRC emacs-lisp :results output silent :session :tangle vandermonde.el
  (defun matrix-fit-polynomial (x-coordinates y-coordinates)
  "Given a list of x and y coordinates, solve for a polynomial that fits them using a Vandermonde matrixs. The result is a vector of factors 'a' that should be used in the standard order: a_1+a_2*x+a_3*x^2+a_4*x^3+... etc"
  (let* ((number-of-points (length x-coordinates))
         (vandermonde-matrix
          (matrix-vandermonde x-coordinates number-of-points))
         (PLU (matrix-PLU-decomposition vandermonde-matrix)))

    (matrix-solve-for-input
     PLU
     (matrix-from-data-list
      number-of-points
      1
      y-coordinates))))
#+END_SRC
To see it work we can try feeding in some random points and see what kind of polynomial we get
#+NAME: edata
#+BEGIN_SRC emacs-lisp :exports both :session
  (matrix-data
   (matrix-fit-polynomial
    '(1.0 2.0 3.0 4.0 5.0)
    '(1.9 2.5 1.8 2.8 4.2)))
#+END_SRC

#+RESULTS: edata
| -7.299999999999994 | 17.008333333333322 | -9.920833333333327 | 2.2916666666666656 | -0.17916666666666659 |
Then we take these factors and stick them into gnuplot to get a quick plot
#+BEGIN_SRC gnuplot :exports both :file polynomial-fit.png :var data=edata
f(x) = -7.299 + 17.00833*x + -9.920833*x**2 + 2.29166*x**3 + -0.179166*x**4
set xrange[0:6]
set yrange[-1:5]
plot f(x)
#+END_SRC

#+RESULTS:
[[file:polynomial-fit.png]]



I don't have the original points plotted here, but by visual inspection you can see that the curve passes through all of our points
